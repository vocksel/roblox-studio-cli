name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-name: roblox-studio-cli-windows-x86_64
            cargo-target: x86_64-pc-windows-msvc
          # - os: ubuntu-18.04
          #   artifact-name: roblox-studio-cli-linux-x86_64
          #   cargo-target: x86_64-unknown-linux-gnu
          # - os: ubuntu-18.04
          #   artifact-name: roblox-studio-cli-linux-aarch64
          #   cargo-target: aarch64-unknown-linux-gnu
          #   linker: gcc-aarch64-linux-gnu
          # - os: macos-latest
          #   artifact-name: roblox-studio-cli-macos-x86_64
          #   cargo-target: x86_64-apple-darwin
          # - os: macos-latest
          #   artifact-name: roblox-studio-cli-macos-aarch64
          #   cargo-target: aarch64-apple-darwin
    name: build (${{ matrix.artifact-name }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.cargo-target }}

      - name: Install Linker packages
        if: ${{ matrix.linker != '' }}
        shell: bash
        run: |
          sudo apt update
          sudo apt install ${{ matrix.linker }}

      - name: Build Binary (All features)
        shell: bash
        run: cargo build --verbose --locked --release --target ${{ matrix.cargo-target }}
        env:
          CARGO_TARGET_DIR: output

      - name: Setup archive + extension
        shell: bash
        run: |
          mkdir -p staging

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "output/${{ matrix.cargo-target }}/release/roblox-studio-cli.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "output/${{ matrix.cargo-target }}/release/roblox-studio-cli" staging/
            cd staging
            zip ../release.zip *
          fi

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: release.zip

  tests:
    needs: ['build']
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Download roblox-studio-cli
        uses: actions/download-artifact@v3
        with:
          name: roblox-studio-cli-windows-x86_64
          path: roblox-studio-cli

      - name: Unzip binary
        shell: bash
        run: |
          ls -al
          7z x release.zip
          ls -al
        working-directory: roblox-studio-cli

      - name: Set auth credentials
        shell: bash
        run: |
          ./roblox-studio-cli.exe auth set .ROBLOSECURITY "${{ secrets.ROBLOSECURITY }}"
          ./roblox-studio-cli.exe auth set oauth2RefreshToken "${{ secrets.ROBLOX_REFRESH_TOKEN }}"
          ./roblox-studio-cli.exe auth set userid "${{ secrets.ROBLOX_USER_ID }}"
        working-directory: roblox-studio-cli

      - name: Install Roblox Studio
        shell: bash
        run: |
          pip install --requirement requirements.txt;
          python install.py
        working-directory: .github/workflows

      # - name: Install Roblox Studio
      #   shell: bash
      #   run: roblox-studio-cli install
      #   working-directory: roblox-studio-cli

      - uses: Roblox/setup-foreman@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v3
        with:
          repository: vocksel/flipbook
          path: example

      - name: Install dependencies
        shell: bash
        run: wally install
        working-directory: example

      - name: Build place file
        shell: bash
        run: rojo build dev.project.json -o studio-tests.rbxl
        working-directory: example

      - name: Run tests
        run: run-in-roblox --place studio-tests.rbxl --script tests/init.server.lua
        working-directory: example
